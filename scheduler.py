import schedule
import time
import subprocess
from datetime import datetime
import os

def run_blog_generator():
    """Lance le script de g√©n√©ration de blog et commit les changements"""
    print(f"\n{'='*60}")
    print(f"[{datetime.now()}] D√©marrage du g√©n√©rateur de blog...")
    print(f"{'='*60}\n")
    
    try:
        # Lancer le script blog_generator_script.py
        result = subprocess.run(
            ["python", "blog_generator_script.py"],
            capture_output=True,
            text=True,
            timeout=3600  # Timeout de 1 heure
        )
        
        if result.returncode == 0:
            print(f"‚úÖ Script termin√© avec succ√®s")
            print(result.stdout)
            
            # Commit automatique des fichiers modifi√©s (comme dans ton workflow)
            print("\nüìù Sauvegarde des modifications sur GitHub...")
            
            # Configuration git
            subprocess.run(["git", "config", "--global", "user.email", "railway-bot@users.noreply.github.com"])
            subprocess.run(["git", "config", "--global", "user.name", "Railway Bot"])
            
            # Ajouter les fichiers modifi√©s
            subprocess.run(["git", "add", "sujets.csv"])
            if os.path.exists("sujets_traites.csv"):
                subprocess.run(["git", "add", "sujets_traites.csv"])
            
            # Commit
            commit_result = subprocess.run(
                ["git", "commit", "-m", f"ü§ñ Article publi√© automatiquement - {datetime.now().strftime('%Y-%m-%d %H:%M')}"],
                capture_output=True
            )
            
            if commit_result.returncode == 0:
                # Push
                push_result = subprocess.run(["git", "push"], capture_output=True)
                if push_result.returncode == 0:
                    print("‚úÖ Modifications sauvegard√©es sur GitHub")
                else:
                    print(f"‚ö†Ô∏è Erreur lors du push: {push_result.stderr.decode()}")
            else:
                print("‚ÑπÔ∏è Aucun changement √† commiter")
                
        else:
            print(f"‚ùå Erreur lors de l'ex√©cution")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚ùå Le script a d√©pass√© le timeout d'1 heure")
    except Exception as e:
        print(f"‚ùå Erreur : {str(e)}")
    
    print(f"\n{'='*60}")
    print(f"[{datetime.now()}] Fin de l'ex√©cution")
    print(f"{'='*60}\n")

# Planifier l'ex√©cution 2 fois par semaine
# Mardi √† 10h UTC (11h Paris hiver, 12h Paris √©t√©)
schedule.every().tuesday.at("10:00").do(run_blog_generator)

# Vendredi √† 10h UTC
schedule.every().friday.at("10:00").do(run_blog_generator)

print("üöÄ Scheduler d√©marr√© !")
print("üìÖ Ex√©cution programm√©e :")
print("   - Mardi √† 10h00 UTC")
print("   - Vendredi √† 10h00 UTC")
print("‚è≥ En attente de la prochaine ex√©cution...")

# Boucle infinie
while True:
    schedule.run_pending()
    time.sleep(60)  # V√©rifie toutes les minutes
